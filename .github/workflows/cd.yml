name: .NET Gauge API Test CD

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - staging
          - production

jobs:
  deploy-and-test:
    name: Deploy and Test on ${{ github.event.inputs.environment || 'test' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'test' }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    
    - name: Setup Gauge
      run: |
        curl -SsL https://downloads.gauge.org/stable | sh
        gauge telemetry off
    
    - name: Install Gauge dotnet plugin
      run: gauge install dotnet
    
    - name: Install Gauge HTML Report plugin
      run: gauge install html-report
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore
    
    - name: Update API Configuration
      run: |
        environment="${{ github.event.inputs.environment || 'test' }}"
        
        # Get base URL based on environment
        if [ "$environment" = "production" ]; then
          baseUrl="${{ secrets.PROD_API_URL }}"
        elif [ "$environment" = "staging" ]; then
          baseUrl="${{ secrets.STAGING_API_URL }}"
        else
          baseUrl="${{ secrets.TEST_API_URL }}"
        fi
        
        # Update AppSettings.json with the environment-specific URL
        jq --arg env "$environment" --arg url "$baseUrl" '.ApiSettings.BaseUrl = $url | .TestSettings.Environment = $env' ApiTests/Configuration/AppSettings.json > tmp.json && mv tmp.json ApiTests/Configuration/AppSettings.json
        
        echo "Updated configuration for $environment environment"
        echo "Base URL: $baseUrl"
    
    - name: Run Gauge tests
      run: |
        gauge run specs/ -v
    
    - name: Archive test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ github.event.inputs.environment }}
        path: |
          reports/
          Logs/
        retention-days: 14
    
    - name: Publish test report
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const { readFileSync } = require('fs');
          const { join } = require('path');
          
          try {
            const summaryFile = join(process.env.GITHUB_WORKSPACE, 'reports/html-report/statistics.json');
            const stats = JSON.parse(readFileSync(summaryFile, 'utf8'));
            
            const totalSpecs = stats.totalSpecsCount;
            const passedSpecs = stats.passedSpecsCount;
            const failedSpecs = stats.failedSpecsCount;
            const totalScenarios = stats.totalScenariosCount;
            const passedScenarios = stats.passedScenariosCount;
            const failedScenarios = stats.failedScenariosCount;
            
            const summary = `## Test Results for ${{ github.event.inputs.environment }} Environment
            
            | Metric | Total | Passed | Failed |
            |--------|-------|--------|--------|
            | Specs  | ${totalSpecs} | ${passedSpecs} | ${failedSpecs} |
            | Scenarios | ${totalScenarios} | ${passedScenarios} | ${failedScenarios} |
            
            [Detailed HTML Report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            if (context.issue && context.issue.number) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } else {
              console.log("No issue/PR context found to add comment to");
              core.summary.addRaw(summary).write();
            }
          } catch (error) {
            console.error('Failed to publish test report:', error);
          } 